# Class diagram code
@startuml


class Doctor {
 -Patient_Name: String
 -Patient_Age: Integer
 -Patient_Address: String
 -Patient_Phone: String
 -Patient_Email: String
 -Medical_History: String
 -Medication_Details: String
 -Appointment_Date: Date
 -Lab_Results: String
 -Diagnostic_Images: Image
 -Machine_Learning_Operation
 -Patient_Consultation
 +Add_Patient_Record():
 +Edit_Patient_Record():
 +Delete_Patient_Record():
 +View_Patient_Record():
 +View_Machine_Learning_Operation():
 +Interact_With_Patient_Consultation():
}


class social_security_database {
 -Patient_Name: String
 -Patient_Age: Integer
 -Patient_Phone: String
 -Patient_Email
 +Add_Patient_To_EHR():
 +Remove_Patient_from_EHR():
}


class IoT_database {
 -Patient_Unique_ID: Integer
 -Patient_IoT_Device: String
 -Patient_IoT_Data: Integer
 +Update_Data():
 +Remove_Data():
 +Extract_Data():
}


class Appointments {
 -Appointment_Date: Date
 -Patient_Name: String
 -Doctor_Name: String
 -Appointment_Type: String
 +Add_Appointment(): void
 +Edit_Appointment(): void
 +Delete_Appointment(): void
 +View_Appointment(): void
}


class Medical_History {
 -Patient_Name: String
 -Medical_History: String
 +Add_Medical_History(): void
 +Edit_Medical_History(): void
 +Delete_Medical_History(): void
 +View_Medical_History(): void
}


class Machine_Learning_Operation {
 -Operation_Details: String
 +Machine_Learning_Operation():
}


class Hospital {
 -Name: String
 -Address: String
 -Phone: String
 +Add_Hospital():
 +Edit_Hospital():
 +Delete_Hospital():
 +View_Hospital():
}


class Patient {
 -Name: String
 -Age: Integer
 -Address: String
 -Phone: String
 +Add_Patient():
 +Edit_Patient():
 +Delete_Patient():
 +View_Patient():
}


class Patient_Record {
 -Patient_Name: String
 -Medical_History: String
 -Medication_Details: String
 -Appointment_Date: Date
 +Add_Record(): void
 +Edit_Record(): void
 +Delete_Record(): void
 +View_Record(): void
}


class Department {
 -Name: String
 -Location: String
 +Add_Department(): void
 +Edit_Department(): void
 +Delete_Department(): void
 +View_Department(): void
}


class Secretary {
 -Name: String
 -Age: Integer
 -Address: String
 -Phone: String
 -Position: String
 +Add_Staff(): void
 +Edit_Staff(): void
 +Delete_Staff(): void
 +View_Staff(): void
}


class Online_Consultation {
 -Patient_Name: String
 -Doctor_Name: String
 -Description: String
 -Date: Date
 +Add_Consultation(): void
 +Edit_Consultation(): void
 +Delete_Consultation(): void
 +View_Consultation(): void
}




class Medication {
 -Name: String
 -Dosage: Integer
 -Frequency: Integer
 +Add_Medication(): void
 +Edit_Medication(): void
 +Delete_Medication(): void
 +View_Medication(): void
}


class Treatment {
 -Name: String
 -Duration: Integer
 -Frequency: Integer
 +Add_Treatment(): void
 +Edit_Treatment(): void
 +Delete_Treatment(): void
 +View_Treatment(): void
}


class Condition {
 -Name: String
 -Description: String
 +Add_Condition(): void
 +Edit_Condition(): void
 +Delete_Condition(): void
 +View_Condition(): void
}


class General_Practitioner {
 -Name: String
 -Age: Integer
 -Address: String
 -Phone: String
 -Specialty: String
 +Add_GP(): void
 +Edit_GP(): void
 +Delete_GP(): void
 +View_GP(): void
}


class Lab_Results {
 -Patient_Name: String
 -Lab_Results: String
 +Add_Lab_Result(): void
 +Edit_Lab_Result(): void
 +Delete_Lab_Result(): void
 +View_Lab_Result(): void
}


class Diagnostic_Images {
 -Patient_Name: String
 -Diagnostic_Images: Image
 +Add_Diagnostic_Image(): void
 +Edit_Diagnostic_Image(): void
 +Delete_Diagnostic_Image(): void
 +View_Diagnostic_Image(): void
}




Doctor <--> Hospital
Doctor --> social_security_database
Doctor --> Appointments
Doctor --> Appointments
Doctor <--> Secretary
Doctor <--> Patient
Patient <--> General_Practitioner
Machine_Learning_Operation --* IoT_database


Patient *--* social_security_database
Patient --> Patient_Record
Department --* Doctor






Doctor --* Online_Consultation
Patient --* Online_Consultation
Patient --> Medication
Doctor --> Medication
Patient --> Treatment
Doctor --> Treatment
Patient --> Condition
Doctor --> Treatment
Patient --> Lab_Results
Doctor --> Lab_Results
Patient --> Diagnostic_Images
Doctor --> Diagnostic_Images
Patient--> Medical_History
Doctor --> Medical_History
General_Practitioner o--o Doctor
@enduml


# User interface 1
import sys
from PyQt6.QtWidgets import *


app = QApplication(sys.argv)


window = QWidget()
window.setWindowTitle('EHR Home Page')


# Create vertical layout to hold the two login buttons
layout = QVBoxLayout()


# Create the two login buttons
login_professional_btn = QPushButton('Log in as a Health Professional')
login_citizen_btn = QPushButton('Log in as a Citizen')


# Add both buttons to the layout
layout.addWidget(login_professional_btn)
layout.addWidget(login_citizen_btn)


# Set the layout of the window
window.setLayout(layout)


# Show the window
window.show()


sys.exit(app.exec())


# User interface 2
import sys
from PyQt6.QtWidgets import *


app = QApplication(sys.argv)


window = QWidget()
window.setWindowTitle('EHR Citizen Home Page')


# Create vertical layout to hold the widgets
layout = QVBoxLayout()


# Create the widgets
medical_history_lbl = QLabel('Medical History')
medical_history_txt = QLineEdit()
medication_details_lbl = QLabel('Medication Details')
medication_details_txt = QLineEdit()
appointment_date_lbl = QLabel('Appointment Date')
appointment_date_dp = QDateEdit()
lab_results_lbl = QLabel('Lab Results')
lab_results_txt = QLineEdit()
diagnostic_images_lbl = QLabel('Diagnostic Images')
diagnostic_images_img = QLabel()
edit_personal_data_btn = QPushButton('Edit Personal Data')


# Add the widgets to the layout
layout.addWidget(medical_history_lbl)
layout.addWidget(medical_history_txt)
layout.addWidget(medication_details_lbl)
layout.addWidget(medication_details_txt)
layout.addWidget(appointment_date_lbl)
layout.addWidget(appointment_date_dp)
layout.addWidget(lab_results_lbl)
layout.addWidget(lab_results_txt)
layout.addWidget(diagnostic_images_lbl)
layout.addWidget(diagnostic_images_img)
layout.addWidget(edit_personal_data_btn)


# Set the layout of the window
window.setLayout(layout)


# Show the window
window.show()


sys.exit(app.exec())


# User interface 3

import sys
from PyQt6.QtWidgets import *


app = QApplication(sys.argv)


window = QWidget()
window.setWindowTitle('EHR Professional Home Page')


# Create vertical layout to hold the widgets
layout = QVBoxLayout()


# Create the widgets
patient_catalog_btn = QPushButton('Patient Catalog')
work_schedule_btn = QPushButton('Work Schedule')
urgent_appointments_btn = QPushButton('Urgent Appointments')
meetings_btn = QPushButton('Meetings')
messages_btn = QPushButton('Messages')


# Add the widgets to the layout
layout.addWidget(patient_catalog_btn)
layout.addWidget(work_schedule_btn)
layout.addWidget(urgent_appointments_btn)
layout.addWidget(meetings_btn)
layout.addWidget(messages_btn)


# Set the layout of the window
window.setLayout(layout)


# Show the window
window.show()


sys.exit(app.exec())


# User interface 4

import sys
from PyQt6.QtWidgets import *


app = QApplication(sys.argv)


window = QWidget()
window.setWindowTitle('EHR Patient Catalog')


# Create vertical layout to hold the widgets
layout = QVBoxLayout()


# Create the widgets
existing_patients_btn = QPushButton('Existing Patients')
register_new_patient_btn = QPushButton('Register New Patient')
social_security_lbl = QLabel('Social Security Number')
social_security_txt = QLineEdit()


# Add the widgets to the layout
layout.addWidget(existing_patients_btn)
layout.addWidget(register_new_patient_btn)
layout.addWidget(social_security_lbl)
layout.addWidget(social_security_txt)


# Set the layout of the window
window.setLayout(layout)


# Show the window
window.show()


sys.exit(app.exec())



# User interface 5

import sys
from PyQt6.QtWidgets import *


app = QApplication(sys.argv)


window = QWidget()
window.setWindowTitle('EHR Add Patient Record')


# Create vertical layout to hold the widgets
layout = QVBoxLayout()


# Create the widgets
patient_name_lbl = QLabel('Patient Name')
patient_name_txt = QLineEdit()
patient_age_lbl = QLabel('Patient Age')
patient_age_txt = QLineEdit()
patient_address_lbl = QLabel('Patient Address')
patient_address_txt = QLineEdit()
patient_phone_lbl = QLabel('Patient Phone')
patient_phone_txt = QLineEdit()
patient_email_lbl = QLabel('Patient Email')
patient_email_txt = QLineEdit()
medical_history_lbl = QLabel('Medical History')
medical_history_txt = QLineEdit()
medication_details_lbl = QLabel('Medication Details')
medication_details_txt = QLineEdit()
appointment_date_lbl = QLabel('Appointment Date')
appointment_date_dp = QDateEdit()
lab_results_lbl = QLabel('Lab Results')
lab_results_txt = QLineEdit()
diagnostic_images_lbl = QLabel('Diagnostic Images')
diagnostic_images_img = QLabel()
edit_patient_record_btn = QPushButton('Edit Patient Record')
delete_patient_record_btn = QPushButton('Delete Patient Record')
view_patient_record_btn = QPushButton('View Patient Record')


# Add the widgets to the layout
layout.addWidget(patient_name_lbl)
layout.addWidget(patient_name_txt)
layout.addWidget(patient_age_lbl)
layout.addWidget(patient_age_txt)
layout.addWidget(patient_address_lbl)
layout.addWidget(patient_address_txt)
layout.addWidget(patient_phone_lbl)
layout.addWidget(patient_phone_txt)
layout.addWidget(patient_email_lbl)
layout.addWidget(patient_email_txt)
layout.addWidget(medical_history_lbl)
layout.addWidget(medical_history_txt)
layout.addWidget(medication_details_lbl)
layout.addWidget(medication_details_txt)
layout.addWidget(appointment_date_lbl)
layout.addWidget(appointment_date_dp)
layout.addWidget(lab_results_lbl)
layout.addWidget(lab_results_txt)
layout.addWidget(diagnostic_images_lbl)
layout.addWidget(diagnostic_images_img)
layout.addWidget(edit_patient_record_btn)
layout.addWidget(delete_patient_record_btn)
layout.addWidget(view_patient_record_btn)


# Set the layout of the window
window.setLayout(layout)


# Show the window
window.show()


sys.exit(app.exec())

